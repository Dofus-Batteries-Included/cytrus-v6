// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Chunk } from "./chunk";

export class File {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): File {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsFile(bb: flatbuffers.ByteBuffer, obj?: File): File {
        return (obj || new File()).__init(
            bb.readInt32(bb.position()) + bb.position(),
            bb
        );
    }

    static getSizePrefixedRootAsFile(
        bb: flatbuffers.ByteBuffer,
        obj?: File
    ): File {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new File()).__init(
            bb.readInt32(bb.position()) + bb.position(),
            bb
        );
    }

    name(): string | null;
    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    name(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
            : null;
    }

    size(): bigint {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
    }

    hash(index: number): number | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset
            ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index)
            : 0;
    }

    hashLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    hashArray(): Int8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset
            ? new Int8Array(
                  this.bb!.bytes().buffer,
                  this.bb!.bytes().byteOffset +
                      this.bb!.__vector(this.bb_pos + offset),
                  this.bb!.__vector_len(this.bb_pos + offset)
              )
            : null;
    }

    chunks(index: number, obj?: Chunk): Chunk | null {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset
            ? (obj || new Chunk()).__init(
                  this.bb!.__indirect(
                      this.bb!.__vector(this.bb_pos + offset) + index * 4
                  ),
                  this.bb!
              )
            : null;
    }

    chunksLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 10);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    executable(): boolean {
        const offset = this.bb!.__offset(this.bb_pos, 12);
        return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
    }

    symlink(): string | null;
    symlink(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    symlink(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 14);
        return offset
            ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
            : null;
    }

    static startFile(builder: flatbuffers.Builder) {
        builder.startObject(6);
    }

    static addName(
        builder: flatbuffers.Builder,
        nameOffset: flatbuffers.Offset
    ) {
        builder.addFieldOffset(0, nameOffset, 0);
    }

    static addSize(builder: flatbuffers.Builder, size: bigint) {
        builder.addFieldInt64(1, size, BigInt("0"));
    }

    static addHash(
        builder: flatbuffers.Builder,
        hashOffset: flatbuffers.Offset
    ) {
        builder.addFieldOffset(2, hashOffset, 0);
    }

    static createHashVector(
        builder: flatbuffers.Builder,
        data: number[] | Int8Array
    ): flatbuffers.Offset;
    /**
     * @deprecated This Uint8Array overload will be removed in the future.
     */
    static createHashVector(
        builder: flatbuffers.Builder,
        data: number[] | Uint8Array
    ): flatbuffers.Offset;
    static createHashVector(
        builder: flatbuffers.Builder,
        data: number[] | Int8Array | Uint8Array
    ): flatbuffers.Offset {
        builder.startVector(1, data.length, 1);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addInt8(data[i]!);
        }
        return builder.endVector();
    }

    static startHashVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(1, numElems, 1);
    }

    static addChunks(
        builder: flatbuffers.Builder,
        chunksOffset: flatbuffers.Offset
    ) {
        builder.addFieldOffset(3, chunksOffset, 0);
    }

    static createChunksVector(
        builder: flatbuffers.Builder,
        data: flatbuffers.Offset[]
    ): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startChunksVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addExecutable(builder: flatbuffers.Builder, executable: boolean) {
        builder.addFieldInt8(4, +executable, +false);
    }

    static addSymlink(
        builder: flatbuffers.Builder,
        symlinkOffset: flatbuffers.Offset
    ) {
        builder.addFieldOffset(5, symlinkOffset, 0);
    }

    static endFile(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }

    static createFile(
        builder: flatbuffers.Builder,
        nameOffset: flatbuffers.Offset,
        size: bigint,
        hashOffset: flatbuffers.Offset,
        chunksOffset: flatbuffers.Offset,
        executable: boolean,
        symlinkOffset: flatbuffers.Offset
    ): flatbuffers.Offset {
        File.startFile(builder);
        File.addName(builder, nameOffset);
        File.addSize(builder, size);
        File.addHash(builder, hashOffset);
        File.addChunks(builder, chunksOffset);
        File.addExecutable(builder, executable);
        File.addSymlink(builder, symlinkOffset);
        return File.endFile(builder);
    }
}
