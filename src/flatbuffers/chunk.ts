// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class Chunk {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Chunk {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsChunk(bb:flatbuffers.ByteBuffer, obj?:Chunk):Chunk {
  return (obj || new Chunk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsChunk(bb:flatbuffers.ByteBuffer, obj?:Chunk):Chunk {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Chunk()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

hash(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

hashLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

hashArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

size():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

offset():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

static startChunk(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addHash(builder:flatbuffers.Builder, hashOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, hashOffset, 0);
}

static createHashVector(builder:flatbuffers.Builder, data:number[]|Int8Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createHashVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createHashVector(builder:flatbuffers.Builder, data:number[]|Int8Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startHashVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addSize(builder:flatbuffers.Builder, size:bigint) {
  builder.addFieldInt64(1, size, BigInt('0'));
}

static addOffset(builder:flatbuffers.Builder, offset:bigint) {
  builder.addFieldInt64(2, offset, BigInt('0'));
}

static endChunk(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createChunk(builder:flatbuffers.Builder, hashOffset:flatbuffers.Offset, size:bigint, offset:bigint):flatbuffers.Offset {
  Chunk.startChunk(builder);
  Chunk.addHash(builder, hashOffset);
  Chunk.addSize(builder, size);
  Chunk.addOffset(builder, offset);
  return Chunk.endChunk(builder);
}
}
