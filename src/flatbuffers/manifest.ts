// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Fragment } from "./fragment";

export class Manifest {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): Manifest {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsManifest(
        bb: flatbuffers.ByteBuffer,
        obj?: Manifest
    ): Manifest {
        return (obj || new Manifest()).__init(
            bb.readInt32(bb.position()) + bb.position(),
            bb
        );
    }

    static getSizePrefixedRootAsManifest(
        bb: flatbuffers.ByteBuffer,
        obj?: Manifest
    ): Manifest {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Manifest()).__init(
            bb.readInt32(bb.position()) + bb.position(),
            bb
        );
    }

    fragments(index: number, obj?: Fragment): Fragment | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? (obj || new Fragment()).__init(
                  this.bb!.__indirect(
                      this.bb!.__vector(this.bb_pos + offset) + index * 4
                  ),
                  this.bb!
              )
            : null;
    }

    fragmentsLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startManifest(builder: flatbuffers.Builder) {
        builder.startObject(1);
    }

    static addFragments(
        builder: flatbuffers.Builder,
        fragmentsOffset: flatbuffers.Offset
    ) {
        builder.addFieldOffset(0, fragmentsOffset, 0);
    }

    static createFragmentsVector(
        builder: flatbuffers.Builder,
        data: flatbuffers.Offset[]
    ): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startFragmentsVector(
        builder: flatbuffers.Builder,
        numElems: number
    ) {
        builder.startVector(4, numElems, 4);
    }

    static endManifest(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }

    static createManifest(
        builder: flatbuffers.Builder,
        fragmentsOffset: flatbuffers.Offset
    ): flatbuffers.Offset {
        Manifest.startManifest(builder);
        Manifest.addFragments(builder, fragmentsOffset);
        return Manifest.endManifest(builder);
    }
}
