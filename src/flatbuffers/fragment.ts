// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from "flatbuffers";

import { Bundle } from "./bundle";
import { File } from "./file";

export class Fragment {
    bb: flatbuffers.ByteBuffer | null = null;
    bb_pos = 0;
    __init(i: number, bb: flatbuffers.ByteBuffer): Fragment {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }

    static getRootAsFragment(
        bb: flatbuffers.ByteBuffer,
        obj?: Fragment
    ): Fragment {
        return (obj || new Fragment()).__init(
            bb.readInt32(bb.position()) + bb.position(),
            bb
        );
    }

    static getSizePrefixedRootAsFragment(
        bb: flatbuffers.ByteBuffer,
        obj?: Fragment
    ): Fragment {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Fragment()).__init(
            bb.readInt32(bb.position()) + bb.position(),
            bb
        );
    }

    name(): string | null;
    name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
    name(optionalEncoding?: any): string | Uint8Array | null {
        const offset = this.bb!.__offset(this.bb_pos, 4);
        return offset
            ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
            : null;
    }

    files(index: number, obj?: File): File | null {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset
            ? (obj || new File()).__init(
                  this.bb!.__indirect(
                      this.bb!.__vector(this.bb_pos + offset) + index * 4
                  ),
                  this.bb!
              )
            : null;
    }

    filesLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 6);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    bundles(index: number, obj?: Bundle): Bundle | null {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset
            ? (obj || new Bundle()).__init(
                  this.bb!.__indirect(
                      this.bb!.__vector(this.bb_pos + offset) + index * 4
                  ),
                  this.bb!
              )
            : null;
    }

    bundlesLength(): number {
        const offset = this.bb!.__offset(this.bb_pos, 8);
        return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
    }

    static startFragment(builder: flatbuffers.Builder) {
        builder.startObject(3);
    }

    static addName(
        builder: flatbuffers.Builder,
        nameOffset: flatbuffers.Offset
    ) {
        builder.addFieldOffset(0, nameOffset, 0);
    }

    static addFiles(
        builder: flatbuffers.Builder,
        filesOffset: flatbuffers.Offset
    ) {
        builder.addFieldOffset(1, filesOffset, 0);
    }

    static createFilesVector(
        builder: flatbuffers.Builder,
        data: flatbuffers.Offset[]
    ): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startFilesVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static addBundles(
        builder: flatbuffers.Builder,
        bundlesOffset: flatbuffers.Offset
    ) {
        builder.addFieldOffset(2, bundlesOffset, 0);
    }

    static createBundlesVector(
        builder: flatbuffers.Builder,
        data: flatbuffers.Offset[]
    ): flatbuffers.Offset {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]!);
        }
        return builder.endVector();
    }

    static startBundlesVector(builder: flatbuffers.Builder, numElems: number) {
        builder.startVector(4, numElems, 4);
    }

    static endFragment(builder: flatbuffers.Builder): flatbuffers.Offset {
        const offset = builder.endObject();
        return offset;
    }

    static createFragment(
        builder: flatbuffers.Builder,
        nameOffset: flatbuffers.Offset,
        filesOffset: flatbuffers.Offset,
        bundlesOffset: flatbuffers.Offset
    ): flatbuffers.Offset {
        Fragment.startFragment(builder);
        Fragment.addName(builder, nameOffset);
        Fragment.addFiles(builder, filesOffset);
        Fragment.addBundles(builder, bundlesOffset);
        return Fragment.endFragment(builder);
    }
}
